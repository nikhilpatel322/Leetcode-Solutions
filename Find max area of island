class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int maxArea = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    maxArea = Math.max(maxArea, getCurrentArea(i, j, grid));
                }
            }
        }

        return maxArea;
    }

    private int getCurrentArea(int i, int j, int[][] grid) {
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] <= 0) {
            return 0;
        }

        grid[i][j] = -1;

        int left = getCurrentArea(i, j - 1, grid);
        int right = getCurrentArea(i, j + 1, grid);
        int up = getCurrentArea(i - 1, j, grid);
        int down = getCurrentArea(i + 1, j, grid);

        return 1 + left + right + up + down;
    }
}
